{"version":3,"file":"index.es.js","sources":["../src/ImagePixelated/index.tsx"],"sourcesContent":["import React, { useRef, useEffect } from \"react\"\n\nexport type ImagePixelatedProps = {\n  src: string\n  width?: number\n  height?: number\n  pixelSize?: number\n  centered?: boolean\n  fillTransparencyColor?: string\n}\n\nexport const ImagePixelated = ({\n  src,\n  width,\n  height,\n  pixelSize = 1,\n  centered,\n  fillTransparencyColor\n}: ImagePixelatedProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>()\n  useEffect(() => {\n    pixelate({\n      src,\n      width,\n      height,\n      pixelSize,\n      centered,\n      fillTransparencyColor\n    })\n  }, [src, width, pixelSize, centered, fillTransparencyColor])\n  const pixelate = ({\n    src,\n    width,\n    height,\n    pixelSize = 1,\n    centered,\n    fillTransparencyColor\n  }: ImagePixelatedProps) => {\n    // create img that will be later painted into the canvas\n    let img = new Image()\n    img.crossOrigin = \"anonymous\"\n    img.src = src\n    // once image is loaded..\n    img.onload = () => {\n      const canvas: HTMLCanvasElement = canvasRef?.current\n      if (canvas) {\n        const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D\n        img.width = width ? width : img.width\n        img.height = height ? height : img.height\n        canvas.width = img.width\n        canvas.height = img.height\n        // we paint the image into the canvas\n        // this is needed to get RGBA info out of each pixel\n        ctx.drawImage(img, 0, 0, img.width, img.height)\n        paintPixels(ctx, img, pixelSize, centered, fillTransparencyColor)\n        img = undefined\n      }\n    }\n  }\n  const paintPixels = (\n    ctx: CanvasRenderingContext2D,\n    img: HTMLImageElement,\n    pixelSize?: number,\n    centered?: boolean,\n    fillTransparencyColor?: string\n  ) => {\n    if (!isNaN(pixelSize) && pixelSize > 0) {\n      for (let x = 0; x < img.width + pixelSize; x += pixelSize) {\n        for (let y = 0; y < img.height + pixelSize; y += pixelSize) {\n          let xColorPick = x\n          let yColorPick = y\n\n          if (x >= img.width) {\n            xColorPick = x - (pixelSize - (img.width % pixelSize) / 2) + 1\n          }\n          if (y >= img.height) {\n            yColorPick = y - (pixelSize - (img.height % pixelSize) / 2) + 1\n          }\n\n          const rgba = ctx.getImageData(xColorPick, yColorPick, 1, 1).data\n          // TODO: add support for png transparent background\n          // need to create another canvas and duplicate process?\n          // one canvas to get the data from\n          // one to paint pixels into\n          ctx.fillStyle =\n            rgba[3] === 0\n              ? fillTransparencyColor\n              : `rgba(${rgba[0]},${rgba[1]},${rgba[2]},${rgba[3]})`\n\n          if (centered) {\n            ctx.fillRect(\n              Math.floor(x - (pixelSize - (img.width % pixelSize) / 2)),\n              Math.floor(y - (pixelSize - (img.height % pixelSize) / 2)),\n              pixelSize,\n              pixelSize\n            )\n          } else {\n            ctx.fillRect(x, y, pixelSize, pixelSize)\n          }\n        }\n      }\n    }\n  }\n  return <canvas ref={canvasRef} />\n}\n"],"names":[],"mappings":"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"}